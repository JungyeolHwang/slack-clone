// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  ONLINE
  AWAY
  BUSY
  OFFLINE
}

enum WorkspaceRole {
  OWNER
  ADMIN
  MEMBER
}

enum MessageType {
  TEXT
  FILE
  IMAGE
  SYSTEM
}

model User {
  id        String     @id @default(uuid())
  email     String     @unique
  username  String     @unique
  password  String
  avatar    String?
  status    UserStatus @default(ONLINE)
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")

  // Relations
  ownedWorkspaces    Workspace[]       @relation("WorkspaceOwner")
  workspaceMembers   WorkspaceMember[]
  createdChannels    Channel[]         @relation("ChannelCreator")
  channelMembers     ChannelMember[]
  messages           Message[]
  sentDirectMessages DirectMessage[]   @relation("DMSender")
  receivedDirectMessages DirectMessage[] @relation("DMReceiver")
  uploadedFiles      File[]
  reactions          Reaction[]

  @@map("users")
}

model Workspace {
  id          String    @id @default(uuid())
  name        String
  slug        String    @unique
  description String?
  ownerId     String    @map("owner_id")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // Relations
  owner          User                @relation("WorkspaceOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members        WorkspaceMember[]
  channels       Channel[]
  directMessages DirectMessage[]

  @@map("workspaces")
}

model WorkspaceMember {
  id          String        @id @default(uuid())
  workspaceId String        @map("workspace_id")
  userId      String        @map("user_id")
  role        WorkspaceRole @default(MEMBER)
  joinedAt    DateTime      @default(now()) @map("joined_at")

  // Relations
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([workspaceId, userId])
  @@map("workspace_members")
}

model Channel {
  id          String    @id @default(uuid())
  workspaceId String    @map("workspace_id")
  name        String
  description String?
  isPrivate   Boolean   @default(false) @map("is_private")
  creatorId   String    @map("creator_id")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // Relations
  workspace Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  creator   User            @relation("ChannelCreator", fields: [creatorId], references: [id])
  members   ChannelMember[]
  messages  Message[]

  @@map("channels")
}

model ChannelMember {
  id        String   @id @default(uuid())
  channelId String   @map("channel_id")
  userId    String   @map("user_id")
  joinedAt  DateTime @default(now()) @map("joined_at")

  // Relations
  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([channelId, userId])
  @@map("channel_members")
}

model Message {
  id          String      @id @default(uuid())
  channelId   String      @map("channel_id")
  userId      String      @map("user_id")
  content     String
  messageType MessageType @default(TEXT) @map("message_type")
  threadId    String?     @map("thread_id")
  editedAt    DateTime?   @map("edited_at")
  createdAt   DateTime    @default(now()) @map("created_at")

  // Relations
  channel      Channel    @relation(fields: [channelId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  thread       Message?   @relation("MessageThread", fields: [threadId], references: [id])
  replies      Message[]  @relation("MessageThread")
  files        File[]
  reactions    Reaction[]

  @@map("messages")
}

model DirectMessage {
  id          String      @id @default(uuid())
  workspaceId String      @map("workspace_id")
  senderId    String      @map("sender_id")
  receiverId  String      @map("receiver_id")
  content     String
  messageType MessageType @default(TEXT) @map("message_type")
  createdAt   DateTime    @default(now()) @map("created_at")

  // Relations
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  sender    User      @relation("DMSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver  User      @relation("DMReceiver", fields: [receiverId], references: [id], onDelete: Cascade)

  @@map("direct_messages")
}

model File {
  id         String   @id @default(uuid())
  messageId  String   @map("message_id")
  filename   String
  filepath   String
  mimetype   String
  size       Int
  uploadedBy String   @map("uploaded_by")
  createdAt  DateTime @default(now()) @map("created_at")

  // Relations
  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  uploader User   @relation(fields: [uploadedBy], references: [id])

  @@map("files")
}

model Reaction {
  id        String   @id @default(uuid())
  messageId String   @map("message_id")
  userId    String   @map("user_id")
  emoji     String
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId, emoji])
  @@map("reactions")
} 